import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { useQuery, useLazyQuery } from '@apollo/client';
import { GET_PARTSINDEX_CATEGORIES } from '@/lib/graphql';

function useIsMobile(breakpoint = 767) {
  const [isMobile, setIsMobile] = React.useState(false);
  React.useEffect(() => {
    const check = () => setIsMobile(window.innerWidth <= breakpoint);
    check();
    window.addEventListener("resize", check);
    return () => window.removeEventListener("resize", check);
  }, [breakpoint]);
  return isMobile;
}

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface PartsIndexTabData {
  label: string;
  heading: string;
  links: string[];
  catalogId: string;
  group?: any;
  groupsLoaded?: boolean; // —Ñ–ª–∞–≥ —á—Ç–æ –≥—Ä—É–ø–ø—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
}

interface PartsIndexCatalog {
  id: string;
  name: string;
  image?: string;
  groups?: PartsIndexGroup[];
}

interface PartsIndexGroup {
  id: string;
  name: string;
  image?: string;
  entityNames?: { id: string; name: string }[];
  subgroups?: { id: string; name: string }[];
}

// GraphQL —Ç–∏–ø—ã
interface PartsIndexCatalogsData {
  partsIndexCategoriesWithGroups: PartsIndexCatalog[];
}

interface PartsIndexCatalogsVariables {
  lang?: 'ru' | 'en';
}

// Fallback —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const fallbackTabData: PartsIndexTabData[] = [
  {
    label: "–î–µ—Ç–∞–ª–∏ –¢–û",
    heading: "–î–µ—Ç–∞–ª–∏ –¢–û",
    catalogId: "parts_to",
    links: ["–î–µ—Ç–∞–ª–∏ –¢–û"],
    groupsLoaded: false,
  },
  {
    label: "–ú–∞—Å–ª–∞",
    heading: "–ú–∞—Å–ª–∞",
    catalogId: "oils",
    links: ["–ú–∞—Å–ª–∞"],
    groupsLoaded: false,
  },
  {
    label: "–®–∏–Ω—ã",
    heading: "–®–∏–Ω—ã", 
    catalogId: "tyres",
    links: ["–®–∏–Ω—ã"],
    groupsLoaded: false,
  },
];

// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞–±—ã —Ç–æ–ª—å–∫–æ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
const createBaseTabData = (catalogs: PartsIndexCatalog[]): PartsIndexTabData[] => {
  console.log('üîÑ –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞–±—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–æ–≤:', catalogs.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
  
  return catalogs.map(catalog => ({
    label: catalog.name,
    heading: catalog.name,
    links: [catalog.name], // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
    catalogId: catalog.id,
    groupsLoaded: false, // –ì—Ä—É–ø–ø—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  }));
};

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ PartsIndex –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω—é —Å –≥—Ä—É–ø–ø–∞–º–∏
const transformPartsIndexToTabData = (catalog: PartsIndexCatalog): string[] => {
  console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞—Ç–∞–ª–æ–≥–∞: "${catalog.name}"`);
  
  let links: string[] = [];
  
  if (catalog.groups && catalog.groups.length > 0) {
    // –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã
    catalog.groups.forEach(group => {
      if (group.subgroups && group.subgroups.length > 0) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
        links.push(...group.subgroups.slice(0, 9 - links.length).map(subgroup => subgroup.name));
      } else {
        // –ï—Å–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–π –≥—Ä—É–ø–ø—ã
        if (links.length < 9) {
          links.push(group.name);
        }
      }
    });
  }
  
  // –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (links.length === 0) {
    links = [catalog.name];
  }
  
  console.log(`üîó –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è "${catalog.name}":`, links);
  return links.slice(0, 9); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 9 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
};

const BottomHeadPartsIndex = ({ menuOpen, onClose }: { menuOpen: boolean; onClose: () => void }) => {
  const isMobile = useIsMobile();
  const router = useRouter();
  const [mobileCategory, setMobileCategory] = useState<null | any>(null);
  const [tabData, setTabData] = useState<PartsIndexTabData[]>(fallbackTabData);
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const [loadingGroups, setLoadingGroups] = useState<Set<number>>(new Set());
  
  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const [currentPage, setCurrentPage] = useState(0);
  const categoriesPerPage = 6; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

  // --- Overlay animation state ---
  const [showOverlay, setShowOverlay] = useState(false);
  useEffect(() => {
    if (menuOpen) {
      setShowOverlay(true);
    } else {
      const timeout = setTimeout(() => setShowOverlay(false), 300);
      return () => clearTimeout(timeout);
    }
  }, [menuOpen]);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–∞–ª–æ–≥–∏ PartsIndex (–±–µ–∑ –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
  const { data: catalogsData, loading, error } = useQuery<PartsIndexCatalogsData, PartsIndexCatalogsVariables>(
    GET_PARTSINDEX_CATEGORIES,
    {
      variables: { 
        lang: 'ru'
      },
      errorPolicy: 'all',
      fetchPolicy: 'cache-first', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
      nextFetchPolicy: 'cache-first', // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
      notifyOnNetworkStatusChange: false,
      onCompleted: (data) => {
        console.log('üéâ PartsIndex –∫–∞—Ç–∞–ª–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ GraphQL (–±–∞–∑–æ–≤—ã–µ):', data);
      },
      onError: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PartsIndex –∫–∞—Ç–∞–ª–æ–≥–æ–≤:', error);
      }
    }
  );

  // –õ–µ–Ω–∏–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
  const [loadCatalogGroups, { loading: groupsLoading }] = useLazyQuery<PartsIndexCatalogsData, PartsIndexCatalogsVariables>(
    GET_PARTSINDEX_CATEGORIES,
    {
      errorPolicy: 'all',
      fetchPolicy: 'cache-first',
      nextFetchPolicy: 'cache-first',
      notifyOnNetworkStatusChange: false,
      onCompleted: (data) => {
        console.log('üéâ –ì—Ä—É–ø–ø—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
      },
      onError: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
      }
    }
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–æ–≤ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏
  useEffect(() => {
    if (catalogsData?.partsIndexCategoriesWithGroups && catalogsData.partsIndexCategoriesWithGroups.length > 0) {
      console.log('‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é PartsIndex:', catalogsData.partsIndexCategoriesWithGroups.length, '–∫–∞—Ç–∞–ª–æ–≥–æ–≤');
      
      const baseTabData = createBaseTabData(catalogsData.partsIndexCategoriesWithGroups);
      setTabData(baseTabData);
      setActiveTabIndex(0);
    } else if (error) {
      console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ PartsIndex:', error);
      setTabData(fallbackTabData);
      setActiveTabIndex(0);
    }
  }, [catalogsData, error]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Ç–∞–±
  const loadGroupsForTab = async (tabIndex: number) => {
    const tab = tabData[tabIndex];
    if (!tab || tab.groupsLoaded || loadingGroups.has(tabIndex)) {
      return; // –ì—Ä—É–ø–ø—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    }

    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞:', tab.catalogId);
    setLoadingGroups(prev => new Set([...prev, tabIndex]));

    try {
      const result = await loadCatalogGroups({
        variables: {
          lang: 'ru'
        }
      });

      if (result.data?.partsIndexCategoriesWithGroups) {
        const catalog = result.data.partsIndexCategoriesWithGroups.find(c => c.id === tab.catalogId);
        if (catalog) {
          const links = transformPartsIndexToTabData(catalog);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–± —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
          setTabData(prevTabs => {
            const newTabs = [...prevTabs];
            newTabs[tabIndex] = {
              ...newTabs[tabIndex],
              links,
              group: catalog.groups?.[0],
              groupsLoaded: true
            };
            return newTabs;
          });
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞:', tab.catalogId, error);
    } finally {
      setLoadingGroups(prev => {
        const newSet = new Set(prev);
        newSet.delete(tabIndex);
        return newSet;
      });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Ç–∞–± - –∑–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã
  const handleTabHover = (tabIndex: number) => {
    loadGroupsForTab(tabIndex);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Ç–∞–±
  const handleTabClick = (tabIndex: number) => {
    setActiveTabIndex(tabIndex);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    loadGroupsForTab(tabIndex);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
  const handleCategoryClick = (catalogId: string, categoryName: string, entityId?: string) => {
    console.log('üîç –ö–ª–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Parts Index:', { catalogId, categoryName, entityId });
    
    onClose();
    
    router.push({
      pathname: '/catalog',
      query: {
        partsIndexCatalog: catalogId,
        categoryName: encodeURIComponent(categoryName),
        ...(entityId && { partsIndexCategory: entityId })
      }
    });
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  const getCurrentPageCategories = () => {
    const startIndex = currentPage * categoriesPerPage;
    const endIndex = startIndex + categoriesPerPage;
    return tabData.slice(startIndex, endIndex);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è/–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  const hasNextPage = (currentPage + 1) * categoriesPerPage < tabData.length;
  const hasPrevPage = currentPage > 0;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const handleNextPage = () => {
    if (hasNextPage) {
      setCurrentPage(prev => prev + 1);
      setActiveTabIndex(0);
    }
  };

  const handlePrevPage = () => {
    if (hasPrevPage) {
      setCurrentPage(prev => prev - 1);
      setActiveTabIndex(0);
    }
  };

  const currentPageCategories = getCurrentPageCategories();

  // –¢–æ–ª—å–∫–æ –º–æ–±–∏–ª—å–Ω—ã–π UX
  if (isMobile && menuOpen) {
    return (
      <>
        {showOverlay && (
          <div
            className={`fixed inset-0 bg-black/7 z-40 transition-opacity duration-300 ${menuOpen ? 'opacity-100' : 'opacity-0'}`}
            onClick={onClose}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"
          />
        )}
        {/* –≠–∫—Ä–∞–Ω –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        {mobileCategory ? (
          <div className="mobile-category-overlay z-50">
            <div className="mobile-header">
              <button className="mobile-back-btn" onClick={() => setMobileCategory(null)}>
                ‚Üê
              </button>
              <span>{mobileCategory.label}</span>
            </div>
            <div className="mobile-subcategories">
              {mobileCategory.links.map((link: string, index: number) => (
                <div 
                  className="mobile-subcategory" 
                  key={link} 
                  onClick={() => {
                    const entityId = mobileCategory.group?.entityNames?.[index]?.id;
                    handleCategoryClick(mobileCategory.catalogId, link, entityId);
                  }}
                >
                  {link}
                </div>
              ))}
            </div>
          </div>
        ) : (
          // –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          <div className="mobile-category-overlay z-50">
            <div className="mobile-header">
              <button className="mobile-back-btn" onClick={onClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é">
                <svg width="24" height="24" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                    <path fillRule="evenodd" clipRule="evenodd" d="M4.11 2.697L2.698 4.11 6.586 8l-3.89 3.89 1.415 1.413L8 9.414l3.89 3.89 1.413-1.415L9.414 8l3.89-3.89-1.415-1.413L8 6.586l-3.89-3.89z" fill="currentColor"></path>
                </svg>
              </button>
              <span>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ Parts Index</span>
              {loading && <span className="text-sm text-gray-500 ml-2">(–∑–∞–≥—Ä—É–∑–∫–∞...)</span>}
            </div>
            
            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ */}
            {tabData.length > categoriesPerPage && (
              <div className="flex justify-between items-center px-4 py-2 bg-gray-50 border-b">
                <button 
                  onClick={handlePrevPage}
                  disabled={!hasPrevPage}
                  className="text-sm text-blue-600 disabled:text-gray-400"
                >
                  ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–µ
                </button>
                <span className="text-sm text-gray-600">
                  {currentPage + 1} –∏–∑ {Math.ceil(tabData.length / categoriesPerPage)}
                </span>
                <button 
                  onClick={handleNextPage}
                  disabled={!hasNextPage}
                  className="text-sm text-blue-600 disabled:text-gray-400"
                >
                  –°–ª–µ–¥—É—é—â–∏–µ ‚Üí
                </button>
              </div>
            )}
            
            <div className="mobile-subcategories">
              {currentPageCategories.map((cat) => (
                <div
                  className="mobile-subcategory"
                  key={cat.catalogId}
                  onClick={() => {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    const catIndex = tabData.findIndex(tab => tab.catalogId === cat.catalogId);
                    if (catIndex !== -1) {
                      loadGroupsForTab(catIndex);
                    }
                    
                    const categoryWithData = {
                      ...cat,
                      catalogId: cat.catalogId,
                      group: cat.group
                    };
                    setMobileCategory(categoryWithData);
                  }}
                  style={{ cursor: "pointer" }}
                >
                  {cat.label}
                  {loadingGroups.has(tabData.findIndex(tab => tab.catalogId === cat.catalogId)) && (
                    <span className="text-xs text-gray-500 ml-2">(–∑–∞–≥—Ä—É–∑–∫–∞...)</span>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ –º–æ–±–∏–ª—å–Ω—ã–π –∏–ª–∏ –º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç
  if (!menuOpen) {
    return null;
  }

  // Desktop –≤–µ—Ä—Å–∏—è
  return (
    <>
      {showOverlay && (
        <div
          className={`fixed inset-0 bg-black/7 z-40 transition-opacity duration-300 ${menuOpen ? 'opacity-100' : 'opacity-0'}`}
          onClick={onClose}
          aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"
        />
      )}
      <div className="menu-all">
        <div className="div-block-28">
          <div className="w-layout-hflex flex-block-90">
            <div className="w-layout-vflex flex-block-88">
              {/* –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ */}
              {tabData.length > categoriesPerPage && (
                <div className="flex justify-between items-center mb-4 px-3">
                  <button 
                    onClick={handlePrevPage}
                    disabled={!hasPrevPage}
                    className="flex items-center space-x-1 text-sm text-blue-600 disabled:text-gray-400 hover:underline"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                    <span>–ù–∞–∑–∞–¥</span>
                  </button>
                  <span className="text-sm text-gray-600">
                    {currentPage + 1} / {Math.ceil(tabData.length / categoriesPerPage)}
                  </span>
                  <button 
                    onClick={handleNextPage}
                    disabled={!hasNextPage}
                    className="flex items-center space-x-1 text-sm text-blue-600 disabled:text-gray-400 hover:underline"
                  >
                    <span>–î–∞–ª–µ–µ</span>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </button>
                </div>
              )}
              
              {/* –ú–µ–Ω—é —Å –∏–∫–æ–Ω–∫–∞–º–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
              {currentPageCategories.map((tab, idx) => (
                <a
                  href="#"
                  className={`link-block-7 w-inline-block${activeTabIndex === idx ? " w--current" : ""}`}
                  key={tab.catalogId}
                  onClick={() => handleTabClick(idx)}
                  onMouseEnter={() => handleTabHover(idx)}
                  style={{ cursor: "pointer" }}
                >
                  <div className="div-block-29">
                    <div className="code-embed-12 w-embed">
                      <svg width="21" height="20" viewBox="0 0 21 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M10.3158 0.643914C10.4674 0.365938 10.8666 0.365938 11.0182 0.643914L14.0029 6.11673C14.0604 6.22222 14.1623 6.29626 14.2804 6.31838L20.4077 7.46581C20.7189 7.52409 20.8423 7.9037 20.6247 8.13378L16.3421 12.6636C16.2595 12.7509 16.2206 12.8707 16.2361 12.9899L17.0382 19.1718C17.079 19.4858 16.7561 19.7204 16.47 19.5847L10.8385 16.9114C10.73 16.8599 10.604 16.8599 10.4955 16.9114L4.86394 19.5847C4.5779 19.7204 4.25499 19.4858 4.29573 19.1718L5.0979 12.9899C5.11336 12.8707 5.07444 12.7509 4.99189 12.6636L0.709252 8.13378C0.491728 7.9037 0.615069 7.52409 0.926288 7.46581L7.05357 6.31838C7.17168 6.29626 7.27358 6.22222 7.33112 6.11673L10.3158 0.643914Z" fill="CurrentColor"></path>
                      </svg>
                    </div>
                  </div>
                  <div className="text-block-47">{tab.label}</div>
                </a>
              ))}
            </div>
            {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –º–µ–Ω—é —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ */}
            <div className="w-layout-vflex flex-block-89">
              <h3 className="heading-16">
                {currentPageCategories[activeTabIndex]?.heading || currentPageCategories[0]?.heading}
                {loading && <span className="text-sm text-gray-500 ml-2">(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...)</span>}
                {loadingGroups.has(activeTabIndex) && <span className="text-sm text-gray-500 ml-2">(–∑–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...)</span>}
              </h3>
              <div className="w-layout-hflex flex-block-92">
                <div className="w-layout-vflex flex-block-91">
                  {(currentPageCategories[activeTabIndex]?.links || currentPageCategories[0]?.links || []).map((link, index) => {
                    const activeCategory = currentPageCategories[activeTabIndex] || currentPageCategories[0];
                    const entityId = activeCategory?.group?.entityNames?.[index]?.id;
                    return (
                      <div
                        className="link-2"
                        key={link}
                        onClick={() => handleCategoryClick(activeCategory.catalogId, link, entityId)}
                        style={{ cursor: "pointer" }}
                      >
                        {link}
                      </div>
                    );
                  })}
                </div>
                <div className="w-layout-vflex flex-block-91-copy">
                  <img src="https://d3e54v103j8qbb.cloudfront.net/plugins/Basic/assets/placeholder.60f9b1840c.svg" loading="lazy" alt="" className="image-17" />
                  <img src="https://d3e54v103j8qbb.cloudfront.net/plugins/Basic/assets/placeholder.60f9b1840c.svg" loading="lazy" alt="" className="image-17" />
                </div>
              </div>
            </div>
          </div>
          {/* –¢–∞–±—ã */}
          <div className="w-layout-hflex flex-block-93">
            <div className="w-layout-vflex flex-block-95">
              <div className="w-layout-hflex flex-block-94">
                <div className="text-block-48">Parts Index API</div>
                <div className="text-block-48">–ö–∞—Ç–∞–ª–æ–≥–∏ –¢–û</div>
                <div className="text-block-48">–ö–∞—Ç–∞–ª–æ–≥–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π</div>
              </div>
              <div className="w-layout-hflex flex-block-96">
                <div className="text-block-49">–í—Å–µ –∫–∞—Ç–∞–ª–æ–≥–∏</div>
                <img src="/images/Arrow_right.svg" loading="lazy" alt="" className="image-19" />
              </div>
            </div>
            <div className="w-layout-vflex flex-block-97">
              <img src="/images/img3.png" loading="lazy" alt="" className="image-18" />
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default BottomHeadPartsIndex;