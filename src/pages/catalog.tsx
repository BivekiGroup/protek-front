import Head from "next/head";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import ProductListCard from "@/components/ProductListCard";
import Filters, { FilterConfig } from "@/components/Filters";
import FiltersWithSearch from "@/components/FiltersWithSearch";
import CatalogProductCard from "@/components/CatalogProductCard";
import CatalogPagination from "@/components/CatalogPagination";
import CatalogSubscribe from "@/components/CatalogSubscribe";
import CatalogInfoHeader from "@/components/CatalogInfoHeader";
import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useRouter } from "next/router";
import { useQuery } from '@apollo/client';
import FiltersPanelMobile from '@/components/FiltersPanelMobile';
import MobileMenuBottomSection from '../components/MobileMenuBottomSection';
import { GET_PARTSAPI_ARTICLES, GET_PARTSAPI_MAIN_IMAGE, SEARCH_PRODUCT_OFFERS, GET_PARTSINDEX_CATALOG_ENTITIES, GET_PARTSINDEX_CATALOG_PARAMS } from '@/lib/graphql';
import { PartsAPIArticlesData, PartsAPIArticlesVariables, PartsAPIArticle, PartsAPIMainImageData, PartsAPIMainImageVariables } from '@/types/partsapi';
import { PartsIndexEntitiesData, PartsIndexEntitiesVariables, PartsIndexEntity, PartsIndexParamsData, PartsIndexParamsVariables } from '@/types/partsindex';
import LoadingSpinner from '@/components/LoadingSpinner';
import ArticleCard from '@/components/ArticleCard';
import CatalogEmptyState from '@/components/CatalogEmptyState';
import { useProductPrices } from '@/hooks/useProductPrices';
import { PriceSkeleton } from '@/components/skeletons/ProductListSkeleton';
import { useCart } from '@/contexts/CartContext';
import toast from 'react-hot-toast';
import CartIcon from '@/components/CartIcon';
import MetaTags from "@/components/MetaTags";
import { getMetaByPath, createCategoryMeta } from "@/lib/meta-config";
import JsonLdScript from "@/components/JsonLdScript";
import { generateBreadcrumbSchema, generateWebSiteSchema } from "@/lib/schema";

const mockData = Array(12).fill({
  image: "",
  discount: "-35%",
  price: "–æ—Ç 17 087 ‚ÇΩ",
  oldPrice: "22 347 ‚ÇΩ",
  title: '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è TYUMEN BATTERY "STANDARD", 6CT-60L, 60',
  brand: "Borsehung",
});

export default function Catalog() {
  const ITEMS_PER_PAGE = 24; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å 12 –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ —Ä–∞–∑
  const PARTSINDEX_PAGE_SIZE = 25; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
  const MAX_BRANDS_DISPLAY = 24; // –°–∫–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
  const [visibleCount, setVisibleCount] = useState(ITEMS_PER_PAGE);
  const router = useRouter();
  const { addItem, isInCart: isItemInCart } = useCart();
  const { 
    partsApiCategory: strId, 
    categoryName,
    partsIndexCatalog: catalogId,
    partsIndexCategory: groupId
  } = router.query;
  
  const [showFiltersMobile, setShowFiltersMobile] = useState(false);
  const [showSortMobile, setShowSortMobile] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedFilters, setSelectedFilters] = useState<{[key: string]: string[]}>({});
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (router.isReady) {
      const urlFilters: {[key: string]: string[]} = {};
      const urlSearchQuery = router.query.q as string || '';
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ URL
      Object.keys(router.query).forEach(key => {
        if (key.startsWith('filter_')) {
          const filterName = key.replace('filter_', '');
          const filterValue = router.query[key];
          if (typeof filterValue === 'string') {
            urlFilters[filterName] = [filterValue];
          } else if (Array.isArray(filterValue)) {
            urlFilters[filterName] = filterValue;
          }
        }
      });
      
      console.log('üîó –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ URL:', { urlFilters, urlSearchQuery });
      
      if (Object.keys(urlFilters).length > 0) {
        setSelectedFilters(urlFilters);
      }
      if (urlSearchQuery) {
        setSearchQuery(urlSearchQuery);
      }
    }
  }, [router.isReady]);
  const [visibleArticles, setVisibleArticles] = useState<PartsAPIArticle[]>([]);
  const [visibleEntities, setVisibleEntities] = useState<PartsIndexEntity[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [entitiesPage, setEntitiesPage] = useState(1); // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è PartsIndex
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [hasMoreEntities, setHasMoreEntities] = useState(true); // –ï—Å—Ç—å –ª–∏ –µ—â–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const [showAllBrands, setShowAllBrands] = useState(false);
  const [catalogFilters, setCatalogFilters] = useState<FilterConfig[]>([]);
  const [filtersLoading, setFiltersLoading] = useState(true);
  const [sortActive, setSortActive] = useState(0);
  const [visibleProductsCount, setVisibleProductsCount] = useState(0); // –°—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
  const [filtersGenerating, setFiltersGenerating] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [targetVisibleCount, setTargetVisibleCount] = useState(ITEMS_PER_PAGE); // –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const [loadedArticlesCount, setLoadedArticlesCount] = useState(ITEMS_PER_PAGE); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
  const [showEmptyState, setShowEmptyState] = useState(false);
  const [partsIndexPage, setPartsIndexPage] = useState(1); // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è PartsIndex
  const [totalPages, setTotalPages] = useState(1); // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª–æ–≥–∏–∫–∏ –∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∏ PartsIndex
  const [accumulatedEntities, setAccumulatedEntities] = useState<PartsIndexEntity[]>([]); // –í—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
  const [entitiesWithOffers, setEntitiesWithOffers] = useState<PartsIndexEntity[]>([]); // –¢–æ–≤–∞—Ä—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
  const [isAutoLoading, setIsAutoLoading] = useState(false); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥—Ä—É–∑–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
  const [currentUserPage, setCurrentUserPage] = useState(1); // –¢–µ–∫—É—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  const [entitiesCache, setEntitiesCache] = useState<Map<number, PartsIndexEntity[]>>(new Map()); // –ö—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü
  const [isFilterChanging, setIsFilterChanging] = useState(false); // –§–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤

  // –ö–∞—Ä—Ç–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É
  const [visibilityMap, setVisibilityMap] = useState<Map<number, boolean>>(new Map());

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
  const handleVisibilityChange = useCallback((index: number, isVisible: boolean) => {
    setVisibilityMap(prev => {
      const currentVisibility = prev.get(index);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      if (currentVisibility === isVisible) {
        return prev;
      }
      const newMap = new Map(prev);
      newMap.set(index, isVisible);
      return newMap;
    });
  }, []);

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏
  useEffect(() => {
    const visibleCount = Array.from(visibilityMap.values()).filter(Boolean).length;
    setVisibleProductsCount(visibleCount);
  }, [visibilityMap]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
  const isPartsAPIMode = Boolean(strId && categoryName);
  const isPartsIndexMode = Boolean(catalogId && categoryName && groupId); // –¢—Ä–µ–±—É–µ–º groupId –¥–ª—è PartsIndex
  const isPartsIndexCatalogOnly = Boolean(catalogId && categoryName && !groupId); // –ö–∞—Ç–∞–ª–æ–≥ –±–µ–∑ –≥—Ä—É–ø–ø—ã

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîç –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞:', {
    catalogId,
    groupId,
    categoryName,
    isPartsAPIMode,
    isPartsIndexMode,
    isPartsIndexCatalogOnly,
    'router.query': router.query
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã PartsAPI
  const { data: articlesData, loading: articlesLoading, error: articlesError } = useQuery<PartsAPIArticlesData, PartsAPIArticlesVariables>(
    GET_PARTSAPI_ARTICLES,
    {
      variables: {
        strId: parseInt(strId as string),
        carId: 9877,
        carType: 'PC'
      },
      skip: !isPartsAPIMode,
      fetchPolicy: 'cache-first'
    }
  );

  const allArticles = articlesData?.partsAPIArticles || [];

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã PartsIndex
  const { data: entitiesData, loading: entitiesLoading, error: entitiesError, refetch: refetchEntities } = useQuery<PartsIndexEntitiesData, PartsIndexEntitiesVariables>(
    GET_PARTSINDEX_CATALOG_ENTITIES,
    {
      variables: {
        catalogId: catalogId as string,
        groupId: groupId as string,
        lang: 'ru',
        limit: PARTSINDEX_PAGE_SIZE,
        page: partsIndexPage,
        q: searchQuery || undefined,
        params: undefined // –ë—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ refetch
      },
      skip: !isPartsIndexMode || !groupId, // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –Ω–µ—Ç groupId
      fetchPolicy: 'cache-and-network'
    }
  );

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è PartsIndex
  const { data: paramsData, loading: paramsLoading, error: paramsError, refetch: refetchParams } = useQuery<PartsIndexParamsData, PartsIndexParamsVariables>(
    GET_PARTSINDEX_CATALOG_PARAMS,
    {
      variables: {
        catalogId: catalogId as string,
        groupId: groupId as string,
        lang: 'ru',
        q: searchQuery || undefined,
        params: undefined // –ë—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ refetch
      },
      skip: !isPartsIndexMode || !groupId, // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –Ω–µ—Ç groupId
      fetchPolicy: 'cache-first'
    }
  );

  // allEntities –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º allLoadedEntities

  // –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ PartsIndex
  const { getPrice, isLoadingPrice, ensurePriceLoaded } = useProductPrices();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ PartsIndex (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ü–µ–Ω)
  useEffect(() => {
    if (isPartsIndexMode && visibleEntities.length > 0) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö —Ü–µ–Ω
      visibleEntities.forEach((entity, index) => {
        const productForPrice = {
          id: entity.id,
          code: entity.code,
          brand: entity.brand.name
        };
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
          ensurePriceLoaded(productForPrice);
        }, index * 50);
      });
    }
  }, [isPartsIndexMode, visibleEntities, ensurePriceLoaded]);

  useEffect(() => {
    if (articlesData?.partsAPIArticles) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ ITEMS_PER_PAGE —Ç–æ–≤–∞—Ä–æ–≤
      const initialLoadCount = Math.min(ITEMS_PER_PAGE, articlesData.partsAPIArticles.length);
      setVisibleArticles(articlesData.partsAPIArticles.slice(0, initialLoadCount));
      setLoadedArticlesCount(initialLoadCount);
      setTargetVisibleCount(ITEMS_PER_PAGE);
      setCurrentPage(1);
    }
  }, [articlesData]);

  useEffect(() => {
    if (entitiesData?.partsIndexCatalogEntities?.list) {
      console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º entitiesData:', {
        listLength: entitiesData.partsIndexCatalogEntities.list.length,
        pagination: entitiesData.partsIndexCatalogEntities.pagination,
        currentPage: entitiesData.partsIndexCatalogEntities.pagination?.page?.current || 1,
        isFilterChanging
      });
      
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (isFilterChanging) {
        setIsFilterChanging(false);
        console.log('üîÑ –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ isFilterChanging - –ø–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      }
      
      const newEntities = entitiesData.partsIndexCatalogEntities.list;
      const pagination = entitiesData.partsIndexCatalogEntities.pagination;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      const currentPage = pagination?.page?.current || 1;
      const hasNext = pagination?.page?.next !== null;
      const hasPrev = pagination?.page?.prev !== null;
      
      setPartsIndexPage(currentPage);
      setHasMoreEntities(hasNext);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      setEntitiesCache(prev => new Map(prev).set(currentPage, newEntities));
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ —Å–±—Ä–æ—Å, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
      if (currentPage === 1) {
        setAccumulatedEntities(newEntities);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º visibleEntities —Å—Ä–∞–∑—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (!isFilterChanging) {
          setVisibleEntities(newEntities);
          console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã visibleEntities –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', newEntities.length);
        } else {
          console.log('üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É visibleEntities - —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑–º–µ–Ω—è—é—Ç—Å—è');
        }
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º
        setAccumulatedEntities(prev => [...prev, ...newEntities]);
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
      if (hasNext) {
        setTotalPages(currentPage + 1); // –ú–∏–Ω–∏–º—É–º –µ—â–µ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      } else {
        setTotalPages(currentPage); // –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      }
      
      console.log('‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', { currentPage, hasNext, hasPrev });
    }
  }, [entitiesData, isFilterChanging]);

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç PartsIndex API
  const convertFiltersToPartsIndexParams = useMemo((): Record<string, any> => {
    if (!paramsData?.partsIndexCatalogParams?.list || Object.keys(selectedFilters).length === 0) {
      return {};
    }

    const apiParams: Record<string, any> = {};

    paramsData.partsIndexCatalogParams.list.forEach((param: any) => {
      const selectedValues = selectedFilters[param.name];
      if (selectedValues && selectedValues.length > 0) {
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
        const matchingValues = param.values.filter((value: any) => 
          selectedValues.includes(value.title || value.value)
        );

        if (matchingValues.length > 0) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ API –∏ –∑–Ω–∞—á–µ–Ω–∏—è
          apiParams[param.id] = matchingValues.map((v: any) => v.value);
        }
      }
    });

    return apiParams;
  }, [paramsData, selectedFilters]);

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü PartsIndex
  const autoLoadMoreEntities = useCallback(async () => {
    if (isAutoLoading || !hasMoreEntities || !isPartsIndexMode) {
      return;
    }

    console.log('üîÑ –ê–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏...');
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫—É
    console.log('üîÑ –ê–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞');

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (–≤—Å–µ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    const currentEntitiesCount = accumulatedEntities.length;

    console.log('üìä –ê–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
      –Ω–∞–∫–æ–ø–ª–µ–Ω–æ–¢–æ–≤–∞—Ä–æ–≤: currentEntitiesCount,
      —Ü–µ–ª–µ–≤–æ–µ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ITEMS_PER_PAGE,
      –µ—Å—Ç—å–ï—â–µ–¢–æ–≤–∞—Ä—ã: hasMoreEntities
    });

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    const loadingCount = accumulatedEntities.filter(entity => {
      const productForPrice = { id: entity.id, code: entity.code, brand: entity.brand.name };
      return isLoadingPrice(productForPrice);
    }).length;

    // –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    if (loadingCount > 5) {
      console.log('‚è≥ –ê–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞: –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –¥–ª—è', loadingCount, '—Ç–æ–≤–∞—Ä–æ–≤ (–±–æ–ª—å—à–µ 5)');
      return;
    }

    // –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏ —É–∂–µ –º–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–æ –º–∞–ª–æ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
    if (accumulatedEntities.length >= ITEMS_PER_PAGE * 8) { // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç —Å 4 –¥–æ 8 —Å—Ç—Ä–∞–Ω–∏—Ü
      console.log('‚ö†Ô∏è –ê–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞: –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º');
      return;
    }

    setIsAutoLoading(true);
    
    try {
      console.log('üîÑ –ê–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞: –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É PartsIndex...');
      
      const apiParams = convertFiltersToPartsIndexParams;
      const paramsString = Object.keys(apiParams).length > 0 ? JSON.stringify(apiParams) : undefined;
      
      const result = await refetchEntities({
        catalogId: catalogId as string,
        groupId: groupId as string,
        lang: 'ru',
        limit: PARTSINDEX_PAGE_SIZE,
        page: partsIndexPage + 1,
        q: searchQuery || undefined,
        params: paramsString
      });

      console.log('‚úÖ –ê–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result.data?.partsIndexCatalogEntities?.list?.length || 0);
      
    } catch (error) {
      console.error('‚ùå –ê–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    } finally {
      setIsAutoLoading(false);
    }
  }, [isAutoLoading, hasMoreEntities, isPartsIndexMode, accumulatedEntities.length, partsIndexPage, refetchEntities, catalogId, groupId, searchQuery]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è PartsIndex –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API
  const generatePartsIndexFilters = useCallback((): FilterConfig[] => {
    if (!paramsData?.partsIndexCatalogParams?.list) {
      return [];
    }

    return paramsData.partsIndexCatalogParams.list.map((param: any) => {
      if (param.type === 'range') {
        // –î–ª—è range —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏—â–µ–º min –∏ max –∑–Ω–∞—á–µ–Ω–∏—è
        const numericValues = param.values
          .map((v: any) => parseFloat(v.value))
          .filter((v: number) => !isNaN(v));
        
        const min = numericValues.length > 0 ? Math.min(...numericValues) : 0;
        const max = numericValues.length > 0 ? Math.max(...numericValues) : 100;

        return {
          type: 'range' as const,
          title: param.name,
          min,
          max,
          defaultOpen: false,
        };
      } else {
        // –î–ª—è dropdown —Ñ–∏–ª—å—Ç—Ä–æ–≤
        return {
          type: 'dropdown' as const,
          title: param.name,
          options: param.values
            .filter((value: any) => value.available) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
            .map((value: any) => value.title || value.value),
          multi: true,
          showAll: true,
          defaultOpen: false,
        };
      }
    });
  }, [paramsData]);



  useEffect(() => {
    if (isPartsIndexMode) {
      // –î–ª—è PartsIndex –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API
      const filters = generatePartsIndexFilters();
      setCatalogFilters(filters);
      setFiltersLoading(paramsLoading);
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤ —É–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ catalog-filters
      setFiltersLoading(false);
    }
  }, [isPartsIndexMode, generatePartsIndexFilters, paramsLoading]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω
  useEffect(() => {
    if (!isPartsIndexMode || accumulatedEntities.length === 0 || isAutoLoading) {
      return;
    }

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ü–µ–Ω (3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    const timer = setTimeout(() => {
      autoLoadMoreEntities();
    }, 3000);

    return () => clearTimeout(timer);
  }, [isPartsIndexMode, accumulatedEntities.length, isAutoLoading]);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
  useEffect(() => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∏:', {
      isPartsIndexMode,
      entitiesWithOffersLength: entitiesWithOffers.length,
      isAutoLoading,
      hasMoreEntities,
      targetItemsPerPage: ITEMS_PER_PAGE
    });

    if (!isPartsIndexMode || entitiesWithOffers.length === 0 || isAutoLoading) {
      return;
    }

    // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –º–∞–ª–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    if (entitiesWithOffers.length < ITEMS_PER_PAGE && hasMoreEntities) {
      console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫—É: —Ç–æ–≤–∞—Ä–æ–≤', entitiesWithOffers.length, '–∏–∑', ITEMS_PER_PAGE);
      const timer = setTimeout(() => {
        console.log('üöÄ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏');
        autoLoadMoreEntities();
      }, 1000);

      return () => clearTimeout(timer);
    } else {
      console.log('‚úÖ –ê–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞: —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –Ω–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö');
    }
  }, [isPartsIndexMode, entitiesWithOffers.length, hasMoreEntities, isAutoLoading]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
  useEffect(() => {
    if (!isPartsIndexMode) {
      return;
    }

    // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑–º–µ–Ω—è—é—Ç—Å—è, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (isFilterChanging) {
      console.log('üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ entitiesWithOffers - —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑–º–µ–Ω—è—é—Ç—Å—è');
      return;
    }

    // –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ
    const entitiesWithOffers = accumulatedEntities;

    console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º entitiesWithOffers (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è):', {
      –Ω–∞–∫–æ–ø–ª–µ–Ω–æ–¢–æ–≤–∞—Ä–æ–≤: accumulatedEntities.length,
      –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö–¢–æ–≤–∞—Ä–æ–≤: entitiesWithOffers.length,
      —Ü–µ–ª–µ–≤–æ–µ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ITEMS_PER_PAGE,
      isFilterChanging
    });

    setEntitiesWithOffers(entitiesWithOffers);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const startIndex = (currentUserPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    const visibleForCurrentPage = entitiesWithOffers.slice(startIndex, endIndex);
    
    console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º visibleEntities:', {
      currentUserPage,
      startIndex,
      endIndex,
      visibleForCurrentPage: visibleForCurrentPage.length,
      entitiesWithOffers: entitiesWithOffers.length
    });
    
    setVisibleEntities(visibleForCurrentPage);
    
  }, [isPartsIndexMode, accumulatedEntities, currentUserPage, isFilterChanging]);



  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è PartsAPI
  const generatePartsAPIFilters = useCallback((): FilterConfig[] => {
    if (!allArticles.length) return [];

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ä—Ç—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const visibleIndices = Array.from(visibilityMap.entries())
      .filter(([_, isVisible]) => isVisible)
      .map(([index]) => index);

    // –ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (–¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
    const articlesToProcess = visibilityMap.size === 0 ? allArticles : 
      visibleIndices.map(index => allArticles[index]).filter(Boolean);

    const brandCounts = new Map<string, number>();
    const productGroups = new Set<string>();

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞ (—Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ)
    articlesToProcess.forEach(article => {
      if (article?.artSupBrand) {
        brandCounts.set(article.artSupBrand, (brandCounts.get(article.artSupBrand) || 0) + 1);
      }
      if (article?.productGroup) productGroups.add(article.productGroup);
    });

    const filters: FilterConfig[] = [];

    if (brandCounts.size > 1) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
      const sortedBrands = Array.from(brandCounts.entries())
        .sort((a, b) => b[1] - a[1]) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
        .map(([brand]) => brand);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–±–æ –ø–µ—Ä–≤—ã–µ N –±—Ä–µ–Ω–¥–æ–≤, –ª–∏–±–æ –≤—Å–µ (–µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")
      const brandsToShow = showAllBrands ? sortedBrands : sortedBrands.slice(0, MAX_BRANDS_DISPLAY);

              filters.push({
          type: "dropdown",
          title: "–ë—Ä–µ–Ω–¥",
          options: brandsToShow.sort(), // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
          multi: true,
          showAll: true,
          defaultOpen: false,
          hasMore: !showAllBrands && sortedBrands.length > MAX_BRANDS_DISPLAY,
          onShowMore: () => setShowAllBrands(true)
        });
    }

    if (productGroups.size > 1) {
      filters.push({
        type: "dropdown",
        title: "–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤",
        options: Array.from(productGroups).sort(),
        multi: true,
        showAll: true,
        defaultOpen: false,
      });
    }

    return filters;
  }, [allArticles, showAllBrands, visibilityMap]);

  const dynamicFilters = useMemo(() => {
    if (isPartsIndexMode) {
      return generatePartsIndexFilters();
    } else if (isPartsAPIMode) {
      return generatePartsAPIFilters();
    }
    return [];
  }, [isPartsIndexMode, isPartsAPIMode, generatePartsIndexFilters, generatePartsAPIFilters]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    if ((isPartsAPIMode && allArticles.length > 0) || (isPartsIndexMode && visibleEntities.length > 0)) {
      setFiltersGenerating(true);
      const timer = setTimeout(() => {
        setFiltersGenerating(false);
      }, 300);
      return () => clearTimeout(timer);
    } else {
      setFiltersGenerating(false);
    }
  }, [isPartsAPIMode, allArticles.length, isPartsIndexMode, visibleEntities.length]);



  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  const updateUrlWithFilters = useCallback((filters: {[key: string]: string[]}, search: string) => {
    const query: any = { ...router.query };
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ URL
    Object.keys(query).forEach(key => {
      if (key.startsWith('filter_') || key === 'q') {
        delete query[key];
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    Object.entries(filters).forEach(([filterName, values]) => {
      if (values.length > 0) {
        query[`filter_${filterName}`] = values.length === 1 ? values[0] : values;
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if (search.trim()) {
      query.q = search;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    router.push({
      pathname: router.pathname,
      query
    }, undefined, { shallow: true });
  }, [router]);

  const handleDesktopFilterChange = (filterTitle: string, value: string | string[]) => {
    setSelectedFilters(prev => {
      const newFilters = { ...prev };
      
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞), —É–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
      if (Array.isArray(value) && value.length === 0) {
        delete newFilters[filterTitle];
      } else if (!value || (typeof value === 'string' && value.trim() === '')) {
        delete newFilters[filterTitle];
      } else {
        // –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        newFilters[filterTitle] = Array.isArray(value) ? value : [value];
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º URL
      updateUrlWithFilters(newFilters, searchQuery);
      
      return newFilters;
    });
  };

  const handleMobileFilterChange = (type: string, value: any) => {
    setSelectedFilters(prev => {
      const newFilters = { ...prev };
      
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞), —É–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
      if (Array.isArray(value) && value.length === 0) {
        delete newFilters[type];
      } else if (!value || (typeof value === 'string' && value.trim() === '')) {
        delete newFilters[type];
      } else {
        // –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        newFilters[type] = Array.isArray(value) ? value : [value];
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º URL
      updateUrlWithFilters(newFilters, searchQuery);
      
      return newFilters;
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const handleSearchChange = useCallback((value: string) => {
    setSearchQuery(value);
    updateUrlWithFilters(selectedFilters, value);
  }, [selectedFilters, updateUrlWithFilters]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleResetFilters = useCallback(() => {
    setSearchQuery('');
    setSelectedFilters({});
    setShowAllBrands(false);
    setPartsIndexPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É PartsIndex –Ω–∞ –ø–µ—Ä–≤—É—é
    
    // –û—á–∏—â–∞–µ–º URL –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    updateUrlWithFilters({}, '');
  }, [updateUrlWithFilters]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–ª—è PartsAPI
  const filteredArticles = useMemo(() => {
    return allArticles.filter(article => {
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
      if (searchQuery.trim()) {
        const searchLower = searchQuery.toLowerCase();
        const articleTitle = [
          article.artSupBrand || '',
          article.artArticleNr || '',
          article.productGroup || ''
        ].join(' ').toLowerCase();
        
        if (!articleTitle.includes(searchLower)) {
          return false;
        }
      }
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
      const brandFilter = selectedFilters['–ë—Ä–µ–Ω–¥'] || [];
      if (brandFilter.length > 0 && !brandFilter.includes(article.artSupBrand || '')) {
        return false;
      }
      
      const groupFilter = selectedFilters['–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤'] || [];
      if (groupFilter.length > 0 && !groupFilter.includes(article.productGroup || '')) {
        return false;
      }
      
      return true;
    });
  }, [allArticles, searchQuery, selectedFilters]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è PartsAPI
  useEffect(() => {
    if (isPartsAPIMode) {
      setVisibleArticles(filteredArticles.slice(0, ITEMS_PER_PAGE));
      setCurrentPage(1);
      setIsLoadingMore(false);
      setVisibilityMap(new Map()); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      setVisibleProductsCount(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      setLoadedArticlesCount(ITEMS_PER_PAGE); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
      setShowEmptyState(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isPartsAPIMode, searchQuery, JSON.stringify(selectedFilters), filteredArticles.length]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è PartsIndex
  useEffect(() => {
    if (isPartsIndexMode) {
      // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
      setShowEmptyState(false);
      
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      if (searchQuery.trim() || Object.keys(selectedFilters).length > 0) {
        console.log('üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        setIsFilterChanging(true);
        
        setPartsIndexPage(1);
        setCurrentUserPage(1);
        setHasMoreEntities(true);
        setAccumulatedEntities([]);
        setEntitiesWithOffers([]);
        setEntitiesCache(new Map());
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç useMemo
        let apiParams: Record<string, any> = {};
        if (paramsData?.partsIndexCatalogParams?.list && Object.keys(selectedFilters).length > 0) {
          paramsData.partsIndexCatalogParams.list.forEach((param: any) => {
            const selectedValues = selectedFilters[param.name];
            if (selectedValues && selectedValues.length > 0) {
              // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
              const matchingValues = param.values.filter((value: any) => 
                selectedValues.includes(value.title || value.value)
              );

              if (matchingValues.length > 0) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ API –∏ –∑–Ω–∞—á–µ–Ω–∏—è
                apiParams[param.id] = matchingValues.map((v: any) => v.value);
              }
            }
          });
        }
        
        const paramsString = Object.keys(apiParams).length > 0 ? JSON.stringify(apiParams) : undefined;
        
        console.log('üîÑ –ó–∞–ø—É—Å–∫ refetch —Å –Ω–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', { 
          searchQuery, 
          selectedFilters, 
          apiParams, 
          paramsString,
          catalogId,
          groupId 
        });
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        refetchParams({
          catalogId: catalogId as string,
          groupId: groupId as string,
          lang: 'ru',
          q: searchQuery || undefined,
          params: paramsString
        }).then(result => {
          console.log('‚úÖ refetchParams —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        }).catch(error => {
          console.error('‚ùå refetchParams –æ—à–∏–±–∫–∞:', error);
        });
        
        refetchEntities({
          catalogId: catalogId as string,
          groupId: groupId as string,
          lang: 'ru',
          limit: PARTSINDEX_PAGE_SIZE,
          page: 1,
          q: searchQuery || undefined,
          params: paramsString
        }).then(result => {
          console.log('‚úÖ refetchEntities —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result.data?.partsIndexCatalogEntities?.list?.length || 0, '—Ç–æ–≤–∞—Ä–æ–≤');
        }).catch(error => {
          console.error('‚ùå refetchEntities –æ—à–∏–±–∫–∞:', error);
        });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        if (isFilterChanging) {
          setIsFilterChanging(false);
        }
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isPartsIndexMode, searchQuery, JSON.stringify(selectedFilters), paramsData]);

  // –£–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑–æ–º –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  useEffect(() => {
    if (isPartsAPIMode && !articlesLoading && !articlesError) {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
      if (allArticles.length === 0) {
        setShowEmptyState(true);
        return;
      }
      
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö - –∂–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
      const timer = setTimeout(() => {
        setShowEmptyState(visibleProductsCount === 0 && allArticles.length > 0);
      }, 2000); // –î–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
      
      return () => clearTimeout(timer);
    } else if (isPartsIndexMode && !entitiesLoading && !entitiesError) {
      // –î–ª—è PartsIndex –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ò –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      const hasLoadedData = accumulatedEntities.length > 0 || Boolean(entitiesData?.partsIndexCatalogEntities?.list);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
      // (—Ç–æ–≤–∞—Ä—ã —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω)
      const shouldShowEmpty = hasLoadedData && visibleEntities.length === 0;
      setShowEmptyState(shouldShowEmpty);
      
      console.log('üìä –û–ø—Ä–µ–¥–µ–ª—è–µ–º showEmptyState –¥–ª—è PartsIndex (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è):', {
        hasLoadedData,
        visibleEntitiesLength: visibleEntities.length,
        accumulatedEntitiesLength: accumulatedEntities.length,
        shouldShowEmpty,
        showEmptyState: shouldShowEmpty
      });
    } else {
      setShowEmptyState(false);
    }
  }, [isPartsAPIMode, articlesLoading, articlesError, visibleProductsCount, allArticles.length, 
      isPartsIndexMode, entitiesLoading, entitiesError, visibleEntities.length, accumulatedEntities.length, entitiesData]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const handleNextPage = useCallback(() => {
    const maxUserPage = Math.ceil(accumulatedEntities.length / ITEMS_PER_PAGE);
    console.log('üîÑ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥":', {
      currentUserPage,
      maxUserPage,
      accumulatedEntitiesLength: accumulatedEntities.length,
      ITEMS_PER_PAGE
    });
    if (currentUserPage < maxUserPage) {
      setCurrentUserPage(prev => {
        console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', prev + 1);
        return prev + 1;
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –≤–ø–µ—Ä–µ–¥: —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
    }
  }, [currentUserPage, accumulatedEntities.length]);

  const handlePrevPage = useCallback(() => {
    console.log('üîÑ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥":', {
      currentUserPage,
      accumulatedEntitiesLength: accumulatedEntities.length
    });
    if (currentUserPage > 1) {
      setCurrentUserPage(prev => {
        const newPage = prev - 1;
        console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', newPage);
        return newPage;
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–∑–∞–¥: —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
    }
  }, [currentUserPage, accumulatedEntities.length]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è PartsAPI)
  const handleLoadMorePartsAPI = useCallback(async () => {
    if (isLoadingMore || !isPartsAPIMode) {
      return;
    }

    setIsLoadingMore(true);
    
    try {
      const additionalCount = Math.min(ITEMS_PER_PAGE, filteredArticles.length - loadedArticlesCount);
      
      if (additionalCount > 0) {
        const newArticles = filteredArticles.slice(loadedArticlesCount, loadedArticlesCount + additionalCount);
        setVisibleArticles(prev => [...prev, ...newArticles]);
        setLoadedArticlesCount(prev => prev + additionalCount);
        setTargetVisibleCount(prev => prev + ITEMS_PER_PAGE);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
    } finally {
      setIsLoadingMore(false);
    }
  }, [isPartsAPIMode, loadedArticlesCount, filteredArticles, isLoadingMore]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è PartsAPI)
  const hasMoreItems = useMemo(() => {
    if (isPartsAPIMode) {
      return loadedArticlesCount < filteredArticles.length;
    }
    return false;
  }, [isPartsAPIMode, loadedArticlesCount, filteredArticles.length]);

  useEffect(() => {
    // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    setAccumulatedEntities([]);
    setVisibleEntities([]);
    setEntitiesWithOffers([]);
    setEntitiesCache(new Map());
    setCurrentUserPage(1);
    setPartsIndexPage(1);
    setHasMoreEntities(true);
    setShowEmptyState(false);
    setIsFilterChanging(false);
    setVisibleCount(ITEMS_PER_PAGE);
  }, [catalogId, groupId]);

  if (filtersLoading) {
    return <div className="py-8 text-center">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤...</div>;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º meta-—Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
  const categoryNameDecoded = decodeURIComponent(categoryName as string || '–ö–∞—Ç–∞–ª–æ–≥');
  const metaData = createCategoryMeta(categoryNameDecoded, visibleProductsCount || undefined);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
  const breadcrumbSchema = generateBreadcrumbSchema([
    { name: "–ì–ª–∞–≤–Ω–∞—è", url: "https://protek.ru/" },
    { name: "–ö–∞—Ç–∞–ª–æ–≥", url: "https://protek.ru/catalog" },
    ...(categoryName ? [{ name: categoryNameDecoded, url: `https://protek.ru/catalog?categoryName=${categoryName}` }] : [])
  ]);

  const websiteSchema = generateWebSiteSchema(
    "Protek - –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π",
    "https://protek.ru",
    "https://protek.ru/search"
  );

  return (
    <>
      <MetaTags {...metaData} />
      <JsonLdScript schema={breadcrumbSchema} />
      <JsonLdScript schema={websiteSchema} />
      <CatalogInfoHeader
        title={
          isPartsAPIMode ? decodeURIComponent(categoryName as string || '–ó–∞–ø—á–∞—Å—Ç–∏') :
          isPartsIndexMode ? decodeURIComponent(categoryName as string || '–¢–æ–≤–∞—Ä—ã') :
          "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã"
        }
        count={
          isPartsAPIMode ? 
            (visibilityMap.size === 0 && allArticles.length > 0 ? undefined : visibleProductsCount) :
          isPartsIndexMode ?
            entitiesWithOffers.length :
            3587
        }
        productName={
          isPartsAPIMode ? "–∑–∞–ø—á–∞—Å—Ç—å" :
          isPartsIndexMode ? "—Ç–æ–≤–∞—Ä" :
          "–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä"
        }
        breadcrumbs={[
          { label: "–ì–ª–∞–≤–Ω–∞—è", href: "/" },
          { label: "–ö–∞—Ç–∞–ª–æ–≥" },
          ...((isPartsAPIMode || isPartsIndexMode) ? [{ label: decodeURIComponent(categoryName as string || '–¢–æ–≤–∞—Ä—ã') }] : [])
        ]}
        showCount={true}
        showProductHelp={true}
      />
      <section className="main">
        <div className="w-layout-blockcontainer container w-container">
          <div className="w-layout-hflex flex-block-13">
            <div className="w-layout-hflex flex-block-84">
              <div className="w-layout-hflex flex-block-85" onClick={() => setShowFiltersMobile((v) => !v)}>
              <div className="code-embed-9 w-embed">
                  <svg width="currentwidth" height="currentheight" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M21 4H14" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M10 4H3" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M21 12H12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M8 12H3" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M21 20H16" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M12 20H3" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M14 2V6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M8 10V14" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M16 18V22" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </div>
                <div>–§–∏–ª—å—Ç—Ä—ã</div>
              </div>
            </div>
            {isPartsAPIMode ? (
                <div className="filters-desktop" style={{ width: '300px', marginRight: '20px', marginBottom: '80px' }}>
                  <Filters
                    filters={dynamicFilters}
                    onFilterChange={handleDesktopFilterChange}
                    filterValues={selectedFilters}
                    searchQuery={searchQuery}
                    onSearchChange={handleSearchChange}
                    isLoading={filtersGenerating}
                  />
                </div>
            ) : isPartsIndexMode ? (
                <div className="filters-desktop" style={{ width: '300px', marginRight: '20px', marginBottom: '80px' }}>
                  <Filters
                    filters={catalogFilters}
                    onFilterChange={handleDesktopFilterChange}
                    filterValues={selectedFilters}
                    searchQuery={searchQuery}
                    onSearchChange={handleSearchChange}
                    isLoading={filtersLoading}
                  />
                </div>
            ) : (
                <div className="filters-desktop" style={{ width: '300px', marginRight: '20px', marginBottom: '80px' }}>
                    <Filters
                        filters={catalogFilters}
                        onFilterChange={handleDesktopFilterChange}
                        filterValues={selectedFilters}
                        searchQuery={searchQuery}
                        onSearchChange={handleSearchChange}
                        isLoading={filtersLoading}
                    />
                </div>
            )}
            <FiltersPanelMobile
              open={showFiltersMobile}
              onClose={() => setShowFiltersMobile(false)}
              filters={isPartsAPIMode ? dynamicFilters : catalogFilters}
              searchQuery={searchQuery}
              onSearchChange={handleSearchChange}
              filterValues={selectedFilters}
              onFilterChange={handleMobileFilterChange}
            />
            
            <div className="w-layout-vflex flex-block-14-copy-copy">
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è PartsAPI */}
              {isPartsAPIMode && articlesLoading && (
                <div className="flex justify-center items-center py-8">
                  <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã..." />
                </div>
              )}
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è PartsIndex */}
              {isPartsIndexMode && entitiesLoading && (
                <div className="flex justify-center items-center py-8">
                  <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã..." />
                </div>
              )}
              

              
              {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
              {isPartsAPIMode && articlesError && (
                <div className="flex justify-center items-center py-8">
                  <div className="text-lg text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {articlesError.message}</div>
                </div>
              )}

              {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è PartsIndex */}
              {isPartsIndexMode && entitiesError && (
                <div className="flex justify-center items-center py-8">
                  <div className="text-lg text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {entitiesError.message}</div>
                </div>
              )}
              
              {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ PartsAPI */}
              {isPartsAPIMode && visibleArticles.length > 0 && (
                <>
                  {visibleArticles.map((article, idx) => (
                    <ArticleCard
                      key={`${article.artId}_${idx}`}
                      article={article}
                      index={idx}
                      onVisibilityChange={handleVisibilityChange}
                    />
                  ))}
                  
                  {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" */}
                  {hasMoreItems && (
                    <div className="w-layout-hflex pagination">
                      <button
                        onClick={handleLoadMorePartsAPI}
                        disabled={isLoadingMore}
                        className="button_strock w-button"
                      >
                        {isLoadingMore ? (
                          <>
                            –ó–∞–≥—Ä—É–∂–∞–µ–º...
                          </>
                        ) : (
                          <>
                            –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ
                          </>
                        )}
                      </button>
                    </div>
                  )}
                </>
              )}
              
              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
              {isPartsIndexMode && isFilterChanging && (
                <div className="flex flex-col items-center justify-center py-12">
                  <LoadingSpinner />
                  <div className="text-gray-500 text-lg mt-4">–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...</div>
                </div>
              )}

              {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ PartsIndex */}
              {isPartsIndexMode && !isFilterChanging && accumulatedEntities.length > 0 && (
                <>
                  {accumulatedEntities.slice(0, visibleCount).map((entity, idx) => {
                    const productForPrice = { id: entity.id, code: entity.code, brand: entity.brand.name };
                    const priceData = getPrice(productForPrice);
                    const isLoadingPriceData = isLoadingPrice(productForPrice);
  // Fallback cart check via frontend context
  const inCartFallback = isItemInCart(entity.id, priceData?.offerKey, entity.code, entity.brand.name);
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
                    let displayPrice = "";
                    let displayCurrency = "RUB";
                    let priceElement;
                    
                    if (isLoadingPriceData) {
                      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
                      priceElement = <PriceSkeleton />;
                    } else if (priceData && priceData.price) {
                      displayPrice = `${priceData.price.toLocaleString('ru-RU')} ‚ÇΩ`;
                      displayCurrency = priceData.currency || "RUB";
                    } else {
                      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω (—Ç–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è)
                      priceElement = <PriceSkeleton />;
                    }

                    return (
                      <CatalogProductCard
                        key={`${entity.id}_${idx}`}
                        title={entity.originalName || entity.name?.name || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                        brand={entity.brand.name}
                        articleNumber={entity.code}
                        brandName={entity.brand.name}
                        image={entity.images?.[0] || ''}
                        price={priceElement ? "" : displayPrice}
                        priceElement={priceElement}
                        oldPrice=""
                        discount=""
                        currency={displayCurrency}
                        productId={entity.id}
                        artId={entity.id}
                        offerKey={priceData?.offerKey}
                        isInCart={priceData?.isInCart || inCartFallback}
                        onAddToCart={async () => {
                          // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
                          if (!priceData && !isLoadingPriceData) {
                            ensurePriceLoaded(productForPrice);
                            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—É –¥–ª—è:', entity.code, entity.brand.name);
                            return;
                          }

                          // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
                          if (priceData && priceData.price) {
                            const itemToAdd = {
                              productId: entity.id,
                              offerKey: priceData.offerKey,
                              name: entity.originalName || entity.name?.name || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                              description: `${entity.brand.name} ${entity.code}`,
                              brand: entity.brand.name,
                              article: entity.code,
                              price: priceData.price,
                              currency: priceData.currency || 'RUB',
                              quantity: 1,
                              stock: undefined, // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è PartsIndex
                              deliveryTime: '1-3 –¥–Ω—è',
                              warehouse: 'Parts Index',
                              supplier: 'Parts Index',
                              isExternal: true,
                              image: entity.images?.[0] || '',
                            };

                            const result = await addItem(itemToAdd);
                            
                            if (result.success) {
                              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                              toast.success(
                                <div>
                                  <div className="font-semibold" style={{ color: '#fff' }}>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!</div>
                                  <div className="text-sm" style={{ color: '#fff', opacity: 0.9 }}>{`${entity.brand.name} ${entity.code} –∑–∞ ${priceData.price.toLocaleString('ru-RU')} ‚ÇΩ`}</div>
                                </div>,
                                {
                                  duration: 3000,
                                  icon: <CartIcon size={20} color="#fff" />,
                                }
                              );
                            } else {
                              toast.error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É');
                            }
                          } else {
                            toast.error('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
                          }
                        }}
                      />
                    );
                  })}
                  
                  {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" */}
                  {visibleCount < accumulatedEntities.length && (
                    <div className="w-layout-hflex pagination">
                      <button
                        onClick={() => setVisibleCount(c => Math.min(c + ITEMS_PER_PAGE, accumulatedEntities.length))}
                        className="button_strock w-button"
                      >
                        –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ
                      </button>
                    </div>
                  )}
                  
                  {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  {isPartsIndexMode && (
                    <div className="text-xs text-gray-500 mt-4 p-2 bg-gray-100 rounded">
                      <div>üîç –û—Ç–ª–∞–¥–∫–∞ PartsIndex (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞):</div>
                      <div>‚Ä¢ accumulatedEntities: {accumulatedEntities.length}</div>
                      <div>‚Ä¢ entitiesWithOffers: {entitiesWithOffers.length}</div>
                      <div>‚Ä¢ visibleEntities: {visibleEntities.length}</div>
                      <div>‚Ä¢ currentUserPage: {currentUserPage}</div>
                      <div>‚Ä¢ partsIndexPage (API): {partsIndexPage}</div>
                      <div>‚Ä¢ isAutoLoading: {isAutoLoading ? '–¥–∞' : '–Ω–µ—Ç'}</div>
                      <div>‚Ä¢ hasMoreEntities: {hasMoreEntities ? '–¥–∞' : '–Ω–µ—Ç'}</div>
                      <div>‚Ä¢ entitiesLoading: {entitiesLoading ? '–¥–∞' : '–Ω–µ—Ç'}</div>
                      <div>‚Ä¢ groupId: {groupId || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</div>
                      <div>‚Ä¢ Target: {ITEMS_PER_PAGE} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</div>
                      <div>‚Ä¢ showEmptyState: {showEmptyState ? '–¥–∞' : '–Ω–µ—Ç'}</div>
                      <button 
                        onClick={() => {
                          console.log('üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∏');
                          autoLoadMoreEntities();
                        }}
                        className="mt-2 px-3 py-1 bg-blue-500 text-white text-xs rounded"
                        disabled={isAutoLoading}
                      >
                        {isAutoLoading ? '–ó–∞–≥—Ä—É–∂–∞–µ–º...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'}
                      </button>
                    </div>
                  )} */}
                </>
              )}

              {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è PartsAPI */}
              {isPartsAPIMode && !articlesLoading && !articlesError && showEmptyState && (
                <CatalogEmptyState 
                  categoryName={decodeURIComponent(categoryName as string || '—Ç–æ–≤–∞—Ä–æ–≤')}
                  hasFilters={searchQuery.trim() !== '' || Object.keys(selectedFilters).some(key => selectedFilters[key].length > 0)}
                  onResetFilters={handleResetFilters}
                />
              )}

              {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è PartsIndex */}
              {isPartsIndexMode && !entitiesLoading && !entitiesError && (() => {
                console.log('üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PartsIndex:', {
                  isPartsIndexMode,
                  entitiesLoading,
                  entitiesError,
                  showEmptyState,
                  visibleEntitiesLength: visibleEntities.length
                });
                return showEmptyState;
              })() && (
                <CatalogEmptyState 
                  categoryName={decodeURIComponent(categoryName as string || '—Ç–æ–≤–∞—Ä–æ–≤')}
                  hasFilters={searchQuery.trim() !== '' || Object.keys(selectedFilters).some(key => selectedFilters[key].length > 0)}
                  onResetFilters={handleResetFilters}
                />
              )}
              
              {/* –ö–∞—Ç–∞–ª–æ–≥ PartsIndex –±–µ–∑ –≥—Ä—É–ø–ø—ã */}
              {isPartsIndexCatalogOnly && (
                <div className="flex flex-col items-center justify-center py-12">
                  <div className="text-gray-500 text-lg mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é</div>
                  <div className="text-gray-400 text-sm">–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é.</div>
                </div>
              )}

              {/* –û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–Ω–µ PartsAPI/PartsIndex) */}
              {!isPartsAPIMode && !isPartsIndexMode && !isPartsIndexCatalogOnly && (
                <div className="flex flex-col items-center justify-center py-12">
                  <div className="text-gray-500 text-lg mb-4">–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</div>
                  <div className="text-gray-400 text-sm">–î–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è.</div>
                </div>
              )}
            </div>
          </div>
        </div>
      </section>
      
      {!isPartsAPIMode && !isPartsIndexMode && <CatalogPagination />}
      <section className="section-3">
        <CatalogSubscribe />
      </section>
      <Footer />
      <MobileMenuBottomSection />
    </>
  );
} 