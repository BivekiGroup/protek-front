import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useQuery } from '@apollo/client';

import Footer from '@/components/Footer';
import Layout from '@/components/Layout';
import VehiclePartsSearchSection from '@/components/VehiclePartsSearchSection';
import LaximoDiagnostic from '@/components/LaximoDiagnostic';
import { GET_LAXIMO_VEHICLE_INFO, GET_LAXIMO_CATALOG_INFO, GET_LAXIMO_UNIT_DETAILS } from '@/lib/graphql';
import { LaximoCatalogInfo } from '@/types/laximo';
import InfoVin from '@/components/vin/InfoVin';
import VinLeftbar from '@/components/vin/VinLeftbar';
import VinKnot from '@/components/vin/VinKnot';
import VinCategory from '@/components/vin/VinCategory';
import PartDetailCard from '@/components/PartDetailCard';
import VinPartCard from '@/components/vin/VinPartCard';
import KnotIn from '@/components/vin/KnotIn';
import KnotParts from '@/components/vin/KnotParts';
import VinQuick from '@/components/vin/VinQuick';
import CatalogSubscribe from '@/components/CatalogSubscribe';
import MobileMenuBottomSection from '@/components/MobileMenuBottomSection';
import MetaTags from '@/components/MetaTags';
import { getMetaByPath } from '@/lib/meta-config';


interface LaximoVehicleInfo {
  vehicleid: string;
  name: string;
  ssd: string;
  brand: string;
  catalog: string;
  attributes: Array<{
    key: string;
    name: string;
    value: string;
  }>;
}

const VehicleDetailsPage = () => {
  const router = useRouter();
  const { brand, vehicleId, oemNumber, searchType: searchTypeParam } = router.query;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∏–∑ URL –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  // –í–∞–∂–Ω–æ: —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Laximo, –¥–ª—è –≥—Ä—É–ø–ø –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ListQuickGroup
  // –ï—Å–ª–∏ –≤ URL –ø–µ—Ä–µ–¥–∞–Ω searchType=categories, –º—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º —ç—Ç–æ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ quickgroups
  let defaultSearchType: 'quickgroups' | 'categories' | 'fulltext' = 'quickgroups';
  
  if (searchTypeParam === 'categories') {
    // –í URL categories, –Ω–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º quickgroups –¥–ª—è –≥—Ä—É–ø–ø –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    defaultSearchType = 'quickgroups';

  } else if (searchTypeParam === 'quickgroups') {
    defaultSearchType = 'quickgroups';
  } else if (searchTypeParam === 'fulltext') {
    defaultSearchType = 'fulltext';
  }
  
  // ====== –í–°–ï –•–£–ö–ò –í –ù–ê–ß–ê–õ–ï –ö–û–ú–ü–û–ù–ï–ù–¢–ê ======
  const [searchType, setSearchType] = useState<'quickgroups' | 'categories' | 'fulltext'>(defaultSearchType);
  const [showKnot, setShowKnot] = useState(false);
  const [foundParts, setFoundParts] = useState<any[]>([]);
  const [activeTab, setActiveTab] = useState<'uzly' | 'manufacturer'>('uzly');
  const [openedPath, setOpenedPath] = useState<string[]>([]);
  const [searchState, setSearchState] = useState<{
    loading: boolean;
    error: any;
    query: string;
    isSearching: boolean;
  }>({
    loading: false,
    error: null,
    query: '',
    isSearching: false
  });
  const [selectedNode, setSelectedNode] = useState<any | null>(null);
  const [selectedQuickGroup, setSelectedQuickGroup] = useState<any | null>(null);
  const [selectedParts, setSelectedParts] = useState<Set<string | number>>(new Set());
  const [highlightedPart, setHighlightedPart] = useState<string | number | null>(null);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
  const ssdFromQuery = Array.isArray(router.query.ssd) ? router.query.ssd[0] : router.query.ssd;
  const useStorage = router.query.use_storage === '1';
  const ssdLengthFromUrl = router.query.ssd_length ? parseInt(router.query.ssd_length as string) : 0;
  
  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ use_storage, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å SSD –∏–∑ localStorage
  let finalSsd = '';
  if (useStorage && typeof window !== 'undefined') {
    const vehicleKey = `vehicle_ssd_${brand}_${vehicleId}`;
    const storedSsd = localStorage.getItem(vehicleKey);
    if (storedSsd) {
      finalSsd = storedSsd;
      // –ù–ï –û–ß–ò–©–ê–ï–ú SSD —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      // localStorage.removeItem(vehicleKey);
    }
  } else if (ssdFromQuery && ssdFromQuery.trim() !== '') {
    finalSsd = ssdFromQuery;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–∞–ª–æ–≥–µ
  const { data: catalogData } = useQuery<{ laximoCatalogInfo: LaximoCatalogInfo }>(
    GET_LAXIMO_CATALOG_INFO,
    {
      variables: { catalogCode: brand },
      skip: !brand
    }
  );

  const { data: vehicleData, loading: vehicleLoading, error: vehicleError } = useQuery<{ laximoVehicleInfo: LaximoVehicleInfo }>(
    GET_LAXIMO_VEHICLE_INFO,
    {
      variables: { 
        catalogCode: brand,
        vehicleId: vehicleId,
        ...(finalSsd && { ssd: finalSsd }),
        localized: true
      },
      skip: !brand || vehicleId === undefined || vehicleId === null,
      errorPolicy: 'all',
      onCompleted: (data) => {
        console.log('üîç VehicleInfo GraphQL completed:', {
          requestedVehicleId: vehicleId,
          returnedVehicleId: data?.laximoVehicleInfo?.vehicleid,
          vehicleName: data?.laximoVehicleInfo?.name,
          ssdUsed: finalSsd?.substring(0, 50) + '...',
          fullData: data
        });
        
        if (data?.laximoVehicleInfo?.vehicleid !== vehicleId) {
          console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï VEHICLE ID!');
          console.log(`üìç URL vehicleId: ${vehicleId}`);
          console.log(`üìç API vehicleId: ${data?.laximoVehicleInfo?.vehicleid}`);
        } else {
          console.log('‚úÖ Vehicle ID —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç URL');
        }
      },
      onError: (error) => {
        console.error('‚ùå VehicleInfo GraphQL error:', error);
      }
    }
  );

  // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
  console.log('üîç [vehicleId].tsx - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è GET_LAXIMO_UNIT_DETAILS:', {
    selectedNode: selectedNode ? {
      unitid: selectedNode.unitid,
      name: selectedNode.name,
      hasSsd: !!selectedNode.ssd
    } : null,
    skipCondition: !selectedNode,
    catalogCode: selectedNode?.catalogCode || selectedNode?.catalog || brand,
    vehicleId: selectedNode?.vehicleId || vehicleId,
    unitId: selectedNode?.unitid || selectedNode?.unitId,
    ssd: selectedNode?.ssd || finalSsd || '',
    finalSsd: finalSsd ? `${finalSsd.substring(0, 50)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
  });

  const {
    data: unitDetailsData,
    loading: unitDetailsLoading,
    error: unitDetailsError
  } = useQuery(
    GET_LAXIMO_UNIT_DETAILS,
    {
      variables: selectedNode
        ? {
            catalogCode: selectedNode.catalogCode || selectedNode.catalog || brand,
            vehicleId: selectedNode.vehicleId || vehicleId,
            unitId: selectedNode.unitid || selectedNode.unitId,
            ssd: selectedNode.ssd || finalSsd || '',
          }
        : { catalogCode: '', vehicleId: '', unitId: '', ssd: '' },
      skip: !selectedNode,
      errorPolicy: 'all',
      fetchPolicy: 'no-cache',
      notifyOnNetworkStatusChange: true,
      onCompleted: (data) => {
        console.log('üîç [vehicleId].tsx - GET_LAXIMO_UNIT_DETAILS completed:', {
          detailsCount: data?.laximoUnitDetails?.length || 0,
          firstDetail: data?.laximoUnitDetails?.[0],
          allDetails: data?.laximoUnitDetails?.map((detail: any) => ({
            name: detail.name,
            oem: detail.oem,
            codeonimage: detail.codeonimage,
            attributesCount: detail.attributes?.length || 0
          }))
        });
      },
      onError: (error) => {
        console.error('‚ùå [vehicleId].tsx - GET_LAXIMO_UNIT_DETAILS error:', error);
      }
    }
  );

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π vehicleId –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –¥—Ä—É–≥–æ–π ID
  useEffect(() => {
    if (vehicleData?.laximoVehicleInfo && vehicleData.laximoVehicleInfo.vehicleid !== vehicleId) {
      const correctVehicleId = vehicleData.laximoVehicleInfo.vehicleid;
      console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${vehicleId} -> ${correctVehicleId}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º localStorage —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
      if (finalSsd && typeof window !== 'undefined') {
        const oldKey = `vehicle_ssd_${brand}_${vehicleId}`;
        const newKey = `vehicle_ssd_${brand}_${correctVehicleId}`;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º SSD –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
        localStorage.setItem(newKey, finalSsd);
        localStorage.removeItem(oldKey);
        console.log(`üíæ SSD –ø–µ—Ä–µ–º–µ—â–µ–Ω: ${oldKey} -> ${newKey}`);
      }
      
      // –°—Ç—Ä–æ–∏–º –Ω–æ–≤—ã–π URL —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º vehicleId
      const currentParams = new URLSearchParams(window.location.search);
      const newUrl = `/vehicle-search/${brand}/${correctVehicleId}?${currentParams.toString()}`;
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
      router.replace(newUrl);
      return;
    }
  }, [vehicleData, vehicleId, brand, finalSsd, router]);

  // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º quickgroup –≤ URL –∏ –æ–±–Ω–æ–≤–ª—è–µ–º selectedQuickGroup
  useEffect(() => {
    const quickgroupId = router.query.quickgroup as string;
    if (quickgroupId) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è dependency
      setSelectedQuickGroup((prev: any) => {
        if (prev && prev.quickgroupid === quickgroupId) return prev;
        return { quickgroupid: quickgroupId };
      });
    } else {
      setSelectedQuickGroup(null);
    }
  }, [router.query.quickgroup]);

  // –°–ª–µ–¥–∏—Ç—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º unitid –≤ URL –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å selectedNode
  useEffect(() => {
    const unitid = router.query.unitid as string;
    if (unitid) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è dependency
      setSelectedNode((prev: any) => {
        if (prev && (prev.unitid === unitid || prev.id === unitid)) return prev;
        return { unitid };
      });
    } else {
      setSelectedNode(null);
    }
  }, [router.query.unitid]);

  const handleCategoryClick = (e?: React.MouseEvent) => {
    if (e) e.preventDefault();
    setShowKnot(true);
  };
  
  useEffect(() => {
    const handler = (e: Event) => {
      const target = e.target as HTMLElement;
      if (target.classList.contains('link-2')) {
        e.preventDefault();
        setShowKnot(true);
      }
    };
    document.addEventListener('click', handler);
    return () => document.removeEventListener('click', handler);
  }, []);
  // ====== –ö–û–ù–ï–¶ –•–£–ö–û–í ======


  const unitDetails = unitDetailsData?.laximoUnitDetails || [];
  
  // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
  React.useEffect(() => {
    if (unitDetailsData?.laximoUnitDetails) {
      console.log('üîç [vehicleId].tsx - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ unitDetails –æ—Ç API:', {
        totalParts: unitDetailsData.laximoUnitDetails.length,
        firstPart: unitDetailsData.laximoUnitDetails[0],
        allCodeOnImages: unitDetailsData.laximoUnitDetails.map((part: any) => ({
          name: part.name,
          codeonimage: part.codeonimage,
          detailid: part.detailid,
          oem: part.oem
        }))
      });
    }
  }, [unitDetailsData]);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  if (vehicleError) {
    console.error('Vehicle GraphQL error:', vehicleError);
  }

  if (vehicleLoading) {
    return (
      <>
        <MetaTags 
          title="–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è..."
          description="–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ..."
        />
        <div style={{ minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#f9fafb' }}>
          <div className="text-center">
            <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-red-600 mx-auto"></div>
            <p className="mt-4 text-lg text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ...</p>
          </div>
        </div>
      </>
    );
  }

  // –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (!catalogData?.laximoCatalogInfo) {
    return (
      <>
        <MetaTags 
          title="–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
          description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        />
        <main className="min-h-screen bg-gray-50 flex items-center justify-center">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900 mb-4">–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
            <p className="text-gray-600 mb-8">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
            <button
              onClick={() => router.back()}
              className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors"
            >
              –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É
            </button>
          </div>
        </main>
      </>
    );
  }

  // –ï—Å–ª–∏ vehicleId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  // –í–∞–∂–Ω–æ: vehicleId –º–æ–∂–µ—Ç –±—ã—Ç—å '0' –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ VIN
  if (!vehicleId || vehicleId === '') {
    return (
      <main className="min-h-screen bg-yellow-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-yellow-900 mb-4">–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω</h1>
          <p className="text-yellow-700 mb-8">–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–µ—Ç–∞–ª—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —á–µ—Ä–µ–∑ VIN –∏–ª–∏ –º–∞—Å—Ç–µ—Ä –ø–æ–¥–±–æ—Ä–∞.</p>
          <button
            onClick={() => router.back()}
            className="bg-yellow-600 text-white px-6 py-3 rounded-lg hover:bg-yellow-700 transition-colors"
          >
            –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É
          </button>
        </div>
      </main>
    );
  }

  // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ vehicleId ‚Äî —Å—Ç—Ä–æ–∫–∞
  const vehicleIdStr = Array.isArray(vehicleId) ? (vehicleId[0] || '') : (vehicleId || '');
  // –î–ª—è Laximo API vehicleId –º–æ–∂–µ—Ç –±—ã—Ç—å '0' –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ VIN
  const fallbackVehicleId = vehicleIdStr;

  let vehicleInfo = vehicleData?.laximoVehicleInfo || {
    vehicleid: fallbackVehicleId,
    name: `–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${catalogData.laximoCatalogInfo.name}`,
    ssd: finalSsd,
    brand: catalogData.laximoCatalogInfo.brand,
    catalog: catalogData.laximoCatalogInfo.code,
    attributes: [] as never[]
  };

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ vehicleid —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—É –∏–∑ URL
  if (vehicleInfo.vehicleid !== fallbackVehicleId && fallbackVehicleId) {
    vehicleInfo = { ...vehicleInfo, vehicleid: fallbackVehicleId };
  }



  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  const hasError = vehicleError && !vehicleData?.laximoVehicleInfo;
  const catalogInfo = catalogData.laximoCatalogInfo;

  // –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ meta-—Ç–µ–≥–∏
  const vehicleName = vehicleInfo.brand && vehicleInfo.name 
    ? (vehicleInfo.name.indexOf(vehicleInfo.brand) !== 0 
        ? `${vehicleInfo.brand} ${vehicleInfo.name}` 
        : vehicleInfo.name)
    : '–ê–≤—Ç–æ–º–æ–±–∏–ª—å';
  
  const metaData = {
    title: `–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è ${vehicleName} - –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É Protek`,
    description: `–ù–∞–π–¥–∏—Ç–µ –∏ –∫—É–ø–∏—Ç–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è ${vehicleName}. –®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏ –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π.`,
    keywords: `–∑–∞–ø—á–∞—Å—Ç–∏ ${vehicleName}, ${vehicleInfo.brand} –∑–∞–ø—á–∞—Å—Ç–∏, –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏, –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–ø—á–∞—Å—Ç–µ–π`,
    ogTitle: `–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è ${vehicleName} - Protek`,
    ogDescription: `–ù–∞–π–¥–∏—Ç–µ –∏ –∫—É–ø–∏—Ç–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è ${vehicleName}. –®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏ –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π.`
  };

  // --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è selectedQuickGroup —Å URL ---
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è VinQuick –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è quickgroup –≤ URL
  const openQuickGroup = (group: any) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ group –Ω–µ null –∏ –∏–º–µ–µ—Ç quickgroupid
    if (!group || !group.quickgroupid) {
      console.warn('‚ö†Ô∏è openQuickGroup: –ø–æ–ª—É—á–µ–Ω null –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –±–µ–∑ quickgroupid:', group);
      return;
    }
    
    setSelectedQuickGroup(group);
    router.push(
      { pathname: router.pathname, query: { ...router.query, quickgroup: group.quickgroupid } },
      undefined,
      { shallow: true }
    );
  };
  // --- –°–±—Ä–æ—Å VinQuick (selectedQuickGroup) –∏ quickgroup –≤ URL ---
  const closeQuickGroup = () => {
    setSelectedQuickGroup(null);
    const { quickgroup, ...rest } = router.query;
    if (quickgroup) {
      router.push(
        { pathname: router.pathname, query: rest },
        undefined,
        { shallow: true }
      );
    }
  };

  // --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è selectedNode (KnotIn) —Å URL ---
  // –û—Ç–∫—Ä—ã—Ç—å KnotIn –∏ –¥–æ–±–∞–≤–∏—Ç—å unitid –≤ URL
  const openKnot = (node: any) => {
    // –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —É–∑–µ–ª –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª–∏
    console.log('üîç [vehicleId].tsx openKnot –ø–æ–ª—É—á–∏–ª —É–∑–µ–ª:', {
      unitId: node.unitid,
      unitName: node.name,
      hasSsd: !!node.ssd,
      nodeSsd: node.ssd ? `${node.ssd.substring(0, 50)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      vehicleSsd: vehicleInfo.ssd ? `${vehicleInfo.ssd.substring(0, 50)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      ssdLength: node.ssd?.length || 0
    });
    
    setSelectedNode(node);
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞
    setSelectedParts(new Set());
    setHighlightedPart(null);
    router.push(
      { pathname: router.pathname, query: { ...router.query, unitid: node.unitid || node.id } },
      undefined,
      { shallow: true }
    );
  };
  // –ó–∞–∫—Ä—ã—Ç—å KnotIn –∏ —É–¥–∞–ª–∏—Ç—å unitid –∏–∑ URL
  const closeKnot = () => {
    setSelectedNode(null);
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —É–∑–ª–∞
    setSelectedParts(new Set());
    setHighlightedPart(null);
    const { unitid, ...rest } = router.query;
    router.push(
      { pathname: router.pathname, query: rest },
      undefined,
      { shallow: true }
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ—Ç–∞–ª–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
  const handlePartSelect = (codeOnImage: string | number | null) => {
    if (codeOnImage === null) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
    setSelectedParts(prev => {
      const newSet = new Set(prev);
      if (newSet.has(codeOnImage)) {
        newSet.delete(codeOnImage); // –£–±–∏—Ä–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
      } else {
        newSet.add(codeOnImage); // –î–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
      }
      return newSet;
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  const handlePartHighlight = (codeOnImage: string | number | null) => {
    setHighlightedPart(codeOnImage);
  };

  return (
    <>
      <MetaTags {...metaData} />
      
        {/* ====== –í–†–ï–ú–ï–ù–ù–´–ô –ú–ê–ö–ï–¢ –î–õ–Ø –í–ï–†–°–¢–ö–ò (–Ω–∞—á–∞–ª–æ) ====== */}
        <InfoVin 
          vehicleName={
            vehicleInfo.brand && vehicleInfo.name && vehicleInfo.name.indexOf(vehicleInfo.brand) !== 0
              ? `${vehicleInfo.brand} ${vehicleInfo.name}`
              : vehicleInfo.name
          }
          vehicleInfo={
            vehicleInfo.attributes && vehicleInfo.attributes.length > 0
              ? vehicleInfo.attributes.map(attr => attr.value).join(' ¬∑ ')
              : ''
          }
          vehicleAttributes={vehicleInfo.attributes || []}
        />

          <div className="w-layout-blockcontainer container-vin w-container">
            {!selectedNode ? (
              <div className="w-layout-hflex flex-block-13">
                {vehicleInfo && vehicleInfo.catalog && vehicleInfo.vehicleid && vehicleInfo.ssd && (
                  <>
                    <VinLeftbar 
                      vehicleInfo={vehicleInfo}
                      onSearchResults={({ results, loading, error, query, isSearching }) => {
                        setFoundParts(results);
                        setSearchState({ loading, error, query, isSearching: isSearching || false });
                      }}
                      onNodeSelect={openKnot}
                      onActiveTabChange={(tab) => {
                        setActiveTab(tab);
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
                        setSelectedQuickGroup(null);
                        setSelectedNode(null);
                        setOpenedPath([]);
                        // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ quickgroup –∏ unitid
                        const { quickgroup, unitid, ...rest } = router.query;
                        if (quickgroup || unitid) {
                          router.push(
                            { pathname: router.pathname, query: rest },
                            undefined,
                            { shallow: true }
                          );
                        }
                      }}
                      onQuickGroupSelect={openQuickGroup}
                      activeTab={activeTab}
                      openedPath={openedPath}
                      setOpenedPath={setOpenedPath}
                      onCloseQuickGroup={closeQuickGroup}
                    />
                    {searchState.isSearching ? (
                      <div className="knot-parts">
                        {searchState.loading ? (
                          <div className="text-center py-12">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600 mx-auto"></div>
                            <p className="mt-4 text-gray-600">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...</p>
                          </div>
                        ) : searchState.error ? (
                          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mt-3">
                            <div className="flex">
                              <div className="flex-shrink-0">
                                <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                                </svg>
                              </div>
                              <div className="ml-3">
                                <h3 className="text-sm font-medium text-red-800">
                                  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞
                                </h3>
                                <div className="mt-2 text-sm text-red-700">
                                  <p>{searchState.error.message}</p>
                                </div>
                              </div>
                            </div>
                          </div>
                        ) : foundParts.length > 0 ? (
                          foundParts.map((detail, idx) => (
                            <VinPartCard
                              key={detail.oem + idx}
                              n={idx + 1}
                              name={detail.name}
                              oem={detail.oem}
                              catalogCode={vehicleInfo.catalog}
                              vehicleId={vehicleInfo.vehicleid}
                            />
                          ))
                        ) : (
                          <div className="text-center py-12">
                            <svg className="w-12 h-12 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            <p className="text-gray-600">
                              –ü–æ –∑–∞–ø—Ä–æ—Å—É "{searchState.query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                            </p>
                            <p className="text-sm text-gray-500 mt-1">
                              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                            </p>
                          </div>
                        )}
                      </div>
                    ) : showKnot ? (
                      <VinKnot />
                    ) : selectedQuickGroup ? (
                      <VinQuick
                        quickGroup={selectedQuickGroup}
                        catalogCode={vehicleInfo.catalog}
                        vehicleId={vehicleInfo.vehicleid}
                        ssd={vehicleInfo.ssd}
                        onBack={closeQuickGroup}
                        onNodeSelect={openKnot}
                      />
                    ) : (
                      <VinCategory
                        catalogCode={vehicleInfo.catalog}
                        vehicleId={vehicleInfo.vehicleid}
                        ssd={vehicleInfo.ssd}
                        onNodeSelect={openKnot}
                        activeTab={activeTab}
                        onQuickGroupSelect={openQuickGroup}
                        openedPath={openedPath}
                        setOpenedPath={setOpenedPath}
                      />
                    )}
                  </>
                )}
              </div>
            ) : (
              <div className="w-layout-hflex flex-block-13">
                <div className="w-layout-vflex flex-block-14-copy-copy">
                  {/* <button onClick={() => setSelectedNode(null)} style={{ marginBottom: 16 }}>–ù–∞–∑–∞–¥</button> */}
                  {/* –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É SSD –≤ KnotIn */}
                  {(() => {
                    const knotSsd = selectedNode.ssd || vehicleInfo.ssd;
                    console.log('üîç [vehicleId].tsx –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ KnotIn:', {
                      selectedNodeSsd: selectedNode.ssd ? `${selectedNode.ssd.substring(0, 50)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                      vehicleInfoSsd: vehicleInfo.ssd ? `${vehicleInfo.ssd.substring(0, 50)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                      finalSsd: knotSsd ? `${knotSsd.substring(0, 50)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                      unitId: selectedNode.unitid,
                      unitName: selectedNode.name
                    });
                    return null;
                  })()}
                  <KnotIn
                    catalogCode={vehicleInfo.catalog}
                    vehicleId={vehicleInfo.vehicleid}
                    ssd={selectedNode.ssd || vehicleInfo.ssd}
                    unitId={selectedNode.unitid}
                    unitName={selectedNode.name}
                    parts={unitDetails}
                    onPartSelect={handlePartSelect}
                    onPartsHighlight={handlePartHighlight}
                    selectedParts={selectedParts}
                  />
                  {unitDetailsLoading ? (
                    <div style={{ padding: 24, textAlign: 'center' }}>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞...</div>
                  ) : unitDetailsError ? (
                    <div style={{ color: 'red', padding: 24 }}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π: {unitDetailsError.message}</div>
                  ) : unitDetails.length > 0 ? (
                    <KnotParts 
                      parts={unitDetails} 
                      catalogCode={vehicleInfo.catalog}
                      vehicleId={vehicleInfo.vehicleid}
                      highlightedCodeOnImage={highlightedPart}
                      selectedParts={selectedParts}
                      onPartSelect={handlePartSelect}
                      onPartHover={handlePartHighlight}
                    />
                  ) : (
                    <div style={{ padding: 24, textAlign: 'center' }}>–î–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                  )}
                </div>
              </div>
            )}
          </div>
            <section className="section-3">
        <CatalogSubscribe />
      </section>
      <Footer />
      <MobileMenuBottomSection />   

        {/* ====== –í–†–ï–ú–ï–ù–ù–´–ô –ú–ê–ö–ï–¢ –î–õ–Ø –í–ï–†–°–¢–ö–ò (–∫–æ–Ω–µ—Ü) ====== */}

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è
        <nav className="bg-white border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => router.back()}
                  className="text-gray-500 hover:text-gray-700 flex items-center space-x-2"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                  <span>–ù–∞–∑–∞–¥</span>
                </button>
                <div className="text-sm text-gray-500">
                  <span>–ì–ª–∞–≤–Ω–∞—è</span>
                  <span className="mx-2">/</span>
                  <span>–ö–∞—Ç–∞–ª–æ–≥</span>
                  <span className="mx-2">/</span>
                  <span>{catalogInfo.name}</span>
                  <span className="mx-2">/</span>
                  <span className="text-gray-900 font-medium">{vehicleInfo.name}</span>
                </div>
              </div>
            </div>
          </div>
        </nav>

        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        <div className="bg-white border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div className="flex items-center space-x-4 mb-6">
              {catalogInfo.icon && (
                <img 
                  src={`/images/brands/${catalogInfo.icon}`} 
                  alt={catalogInfo.name}
                  className="w-12 h-12 object-contain"
                  onError={(e) => {
                    e.currentTarget.style.display = 'none';
                  }}
                />
              )}
              <div>
                <h1 className="text-2xl font-bold text-gray-900">{vehicleInfo.name}</h1>
                <p className="text-lg text-gray-600">{catalogInfo.name}</p>
              </div>
            </div>

            –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            {hasError && (
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-yellow-800">
                      –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    </h3>
                    <div className="mt-2 text-sm text-yellow-700">
                      <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.</p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-6">
              <h4 className="text-sm font-medium text-gray-900 mb-3">
                üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-gray-500">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å localStorage:</span>
                  <span className="ml-2 font-medium">{useStorage ? '–î–∞' : '–ù–µ—Ç'}</span>
                </div>
                <div>
                  <span className="text-gray-500">–î–ª–∏–Ω–∞ SSD –∏–∑ URL:</span>
                  <span className="ml-2 font-medium">{ssdLengthFromUrl || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                </div>
                <div>
                  <span className="text-gray-500">SSD –ø–æ–ª—É—á–µ–Ω:</span>
                  <span className="ml-2 font-medium">{finalSsd ? '–î–∞' : '–ù–µ—Ç'}</span>
                </div>
                <div>
                  <span className="text-gray-500">–î–ª–∏–Ω–∞ SSD:</span>
                  <span className="ml-2 font-medium">{finalSsd.length}</span>
                </div>
                <div className="md:col-span-2">
                  <span className="text-gray-500">SSD (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):</span>
                  <span className="ml-2 font-mono text-xs break-all">
                    {finalSsd ? finalSsd.substring(0, 100) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                  </span>
                </div>
              </div>
            </div>

            –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            {vehicleInfo.attributes && vehicleInfo.attributes.length > 0 && (
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {vehicleInfo.attributes.map((attr, index) => (
                  <div key={index} className="bg-gray-50 rounded-lg p-3">
                    <dt className="text-sm font-medium text-gray-500">{attr.name}</dt>
                    <dd className="text-sm text-gray-900 mt-1">{attr.value}</dd>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        –°–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="mb-6">
            <h2 className="text-xl font-bold text-gray-900 mb-2">–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π</h2>
            <p className="text-gray-600">
              –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            </p>
          </div>

          –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
          <LaximoDiagnostic
            catalogCode={vehicleInfo.catalog}
            vehicleId={vehicleInfo.vehicleid}
            ssd={vehicleInfo.ssd}
          />

          <VehiclePartsSearchSection
            catalogInfo={catalogInfo}
            vehicleInfo={vehicleInfo}
            searchType={searchType}
            onSearchTypeChange={setSearchType}
          />
        </div> */}
    </>
  );
};

export default VehicleDetailsPage; 